package uk.ac.ox.oucs.search2.task;

import org.joda.time.DateTime;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * @author Colin Hebert
 */
public class DefaultTask implements Task {
    public final static String DOCUMENT_REFERENCE = DefaultTask.class.getCanonicalName() + ".documentReference";
    public final static String SITE_ID = DefaultTask.class.getCanonicalName() + ".siteId";
    private final String type;
    private final DateTime creationDate;
    private final Map<String, String> properties = new HashMap<String, String>();

    public DefaultTask(Type type) {
        this(type, DateTime.now());
    }

    public DefaultTask(Type type, DateTime creationDate) {
        this(type.getTypeName(), creationDate);
    }

    protected DefaultTask(String type, DateTime creationDate) {
        this.type = type;
        this.creationDate = creationDate;
    }

    @Override
    public String getType() {
        return type;
    }

    @Override
    public Date getCreationDate() {
        return creationDate.toDate();
    }

    @Override
    public String getProperty(String propertyName) {
        return properties.get(propertyName);
    }

    public DefaultTask setProperty(String propertyName, String propertyValue) {
        properties.put(propertyName, propertyValue);
        return this;
    }

    /**
     * Basic types of tasks generated by the event system}
     */
    public enum Type {
        /**
         * Index a new specific content, if the content was already indexed, it will be reindexed and the new values
         * will overwrite the previous values
         */
        INDEX_DOCUMENT,
        /**
         * Remove a content from the index
         */
        UNINDEX_DOCUMENT,

        /**
         * Index an entire site, if the content was indexed, the new version will overwrite the previous one.
         * If the content is not available anymore, it won't be modified (or deleted) from the index.
         */
        INDEX_SITE,
        /**
         * Index an entire site, if the content was indexed, the new version will overwrite the previous one.
         * If the content is not available anymore, it will be removed from the index.
         */
        REINDEX_SITE,
        /**
         * Remove every entry in the index related to one site
         */
        UNINDEX_SITE,

        /**
         * Index every content available and handled.
         * If the content is not available anymore, it won't be modified (or deleted) from the index.
         */
        INDEX_ALL,
        /**
         * Index every content available and handled.
         * If the content is not available anymore, it will be removed from the index.
         */
        REINDEX_ALL,
        /**
         * Remove every entry in the index
         */
        UNINDEX_ALL,

        /**
         * Do nothing
         */
        IGNORE;

        public String getTypeName() {
            return Type.class.getCanonicalName() + "." + name();
        }
    }
}
