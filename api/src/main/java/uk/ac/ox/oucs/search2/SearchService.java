package uk.ac.ox.oucs.search2;

import uk.ac.ox.oucs.search2.filter.SearchFilter;
import uk.ac.ox.oucs.search2.result.SearchResultList;

import java.util.Collection;

/**
 * Service used to do full text search in the Sakai instance
 *
 * @author Colin Hebert
 */
public interface SearchService {
    /**
     * Search in the current search engine
     *
     * @param searchQuery full text query
     * @return a list of results (empty if there is no results)
     */
    SearchResultList search(String searchQuery);

    /**
     * Search in the current search engine
     *
     * @param searchQuery full text query
     * @param contexts    contexts (site Ids) in which the search is done
     * @return a list of results (empty if there is no results)
     */
    SearchResultList search(String searchQuery, Collection<String> contexts);

    /**
     * Search in the current search engine
     *
     * @param searchQuery full text query
     * @param context     context (scope) in which the search is done
     * @return a list of results (empty if there is no results)
     */
    SearchResultList search(String searchQuery, SearchContext context);

    /**
     * Search in the current search engine with paging
     *
     * @param searchQuery full text query
     * @param start       index of the first expected result
     * @param length      number of results expected
     * @return a list of results (empty if there is no results)
     */
    SearchResultList search(String searchQuery, long start, long length);

    /**
     * Search in the current search engine with paging
     *
     * @param searchQuery full text query
     * @param contexts    contexts (site Ids) in which the search is done
     * @param start       index of the first expected result
     * @param length      number of results expected
     * @return a list of results (empty if there is no results)
     */
    SearchResultList search(String searchQuery, Collection<String> contexts, long start, long length);

    /**
     * Search in the current search engine with paging
     *
     * @param searchQuery full text query
     * @param context     context (scope) in which the search is done
     * @param start       index of the first expected result
     * @param length      number of results expected
     * @return a list of results (empty if there is no results)
     */
    SearchResultList search(String searchQuery, SearchContext context, long start, long length);

    /**
     * Get a search suggestion provided by the search engine
     *
     * @param searchString Current query
     * @return a search query generated by the search engine or null if there is no suggestions
     */
    String getSuggestion(String searchString);

    /**
     * Set filters applied on results before being returned
     *
     * @param searchFilters filters to apply on each result
     */
    void setSearchFilters(Iterable<SearchFilter> searchFilters);

    /**
     * Default search contexts
     */
    public enum SearchContext {
        /**
         * Search in the currently displayed site.
         *
         * @deprecated Obtaining the current site is not recommended, instead the siteId should
         */
        @Deprecated
        CURRENT_SITE,
        /**
         * Search in all the sites where the current user is a member
         */
        SUBSCRIBED_SITES,
        /**
         * Search in every accessible site (public sites included)
         */
        ALL_SITES
    }
}
